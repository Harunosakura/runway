Description:
  This template deploys a VPC, with a pair of public and private subnets spread
  across two Availability Zones. It deploys an Internet Gateway, with a default
  route on the public subnets. It deploys a pair of NAT Gateways (one in each AZ),
  and default routes for them in the private subnets.

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: NSVPCTemplate

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.40.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.40.1.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.40.2.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.40.10.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.40.20.0/24

Resources:
  NSVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  NSInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  NSInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref NSInternetGateway
      VpcId: !Ref NSVPC

  NSPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref NSVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  NSPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref NSVPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  NSPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref NSVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  NSPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref NSVPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)


  NSNatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: NSInternetGatewayAttachment
    Properties:
      Domain: vpc

  NSNatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: NSInternetGatewayAttachment
    Properties:
      Domain: vpc

  NSNatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NSNatGateway1EIP.AllocationId
      SubnetId: !Ref NSPublicSubnet1

  NSNatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NSNatGateway2EIP.AllocationId
      SubnetId: !Ref NSPublicSubnet2

  NSPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref NSVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  NSDefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: NSInternetGatewayAttachment
    Properties:
      RouteTableId: !Ref NSPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref NSInternetGateway

  NSPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NSPublicRouteTable
      SubnetId: !Ref NSPublicSubnet1

  NSPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NSPublicRouteTable
      SubnetId: !Ref NSPublicSubnet2


  NSPrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref NSVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  NSDefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NSPrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NSNatGateway1

  NSPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NSPrivateRouteTable1
      SubnetId: !Ref NSPrivateSubnet1

  NSPrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref NSVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ2)

  NSDefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NSPrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NSNatGateway2

  NSPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NSPrivateRouteTable2
      SubnetId: !Ref NSPrivateSubnet2

  NSPrivateSecurityGroup: # on instance
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "private-ingress"
      GroupDescription: "Security group with ingress rule to Bastion Instance"
      SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '22'
            ToPort: '22'
            CidrIp: !Ref VpcCIDR

          - IpProtocol: ICMP
            FromPort: '8'
            ToPort: '-1'
            CidrIp: !Ref VpcCIDR

          - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: !Ref VpcCIDR
      Tags:
        -
          Key: "Name"
          Value: "NSPrivateSecurityGroup"
      VpcId: !Ref NSVPC

  NSPublicSecurityGroup: # on instance
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "bastion-ingress"
      GroupDescription: "Security group with ingress rule to Bastion Instance"
      SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '22'
            ToPort: '22'
            CidrIp: !Ref VpcCIDR

          - IpProtocol: ICMP
            FromPort: '8'
            ToPort: '-1'
            CidrIp: !Ref VpcCIDR

          - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: 0.0.0.0/0
      Tags:
        -
          Key: "Name"
          Value: "NSPublicSecurityGroup"
      VpcId: !Ref NSVPC

  NSBastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "bastion-allowed-sg"
      GroupDescription: "Security group with ingress from everywhere to Bastion instance"
      SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '22'
            ToPort: '22'
            CidrIp: 0.0.0.0/0

          - IpProtocol: ICMP
            FromPort: '8'
            ToPort: '-1'
            CidrIp: 0.0.0.0/0
      Tags:
        -
          Key: "Name"
          Value: "NSBastionSG"
      VpcId: !Ref NSVPC

Outputs:
  NSVPC:
    Description: A reference to the created VPC
    Value: !Ref NSVPC

  NSPublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref NSPublicSubnet1, !Ref NSPublicSubnet2 ]]

  NSPrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref NSPrivateSubnet1, !Ref NSPrivateSubnet2 ]]

  NSPublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref NSPublicSubnet1
    Export:
      Name: NSPubSN1

  NSPublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref NSPublicSubnet2
    Export:
      Name: NSPubSN2

  NSPrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref NSPrivateSubnet1
    Export:
      Name: NSPrvSN1

  NSPrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref NSPrivateSubnet2
    Export:
      Name: NSPrvSN2

  NSPrivateSecurityGroup:
    Description: Security group with no ingress rule
    Value: !Ref NSPrivateSecurityGroup
    Export:
      Name: NSPrivateSecurityGroup


  NSPublicSecurityGroup:
    Description: Security group with no ingress rule
    Value: !Ref NSPublicSecurityGroup
    Export:
      Name: NSPublicSecurityGroup

  NSVPCBastionSG:
    Description: Security group with no ingress rule
    Value: !Ref NSBastionSecurityGroup
    Export:
      Name: NSVPCBastionSG
